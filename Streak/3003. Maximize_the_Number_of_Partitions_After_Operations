class Solution {
    String s;
    int k;
    Map<String, Integer> memo=new HashMap<>();
    public int maxPartitionsAfterOperations(String s, int k) {
        this.k = k;
        this.s = s;
        return helper(0, 0, 1);
    }
    private int helper(int index, int bitmask, int changeallowed){
        if(index==s.length())
            return 1;
        String key = index+","+bitmask+","+changeallowed;
        if(memo.containsKey(key)) return memo.get(key);
        int pos=s.charAt(index)-'a';
        int newbitmask = bitmask|(1<<pos);
        int ans=0;
        if(Integer.bitCount(newbitmask)>k){
            ans=1+helper(index+1, (1<<pos), changeallowed);
        }else{
            ans=helper(index+1, newbitmask, changeallowed);
        }
        if(changeallowed==1){
            for(int i=0; i<26; i++){
                int newmask = bitmask|(1<<i);
                if(Integer.bitCount(newmask)>k)
                    ans = Math.max(ans,1+helper(index+1,(1<<i),0));
                else
                    ans=Math.max(ans,helper(index+1, newmask, 0));
            }
        }
        memo.put(key, ans);
        return ans;
    }
}
